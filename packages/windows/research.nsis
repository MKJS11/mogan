; includes
!include "MUI2.nsh"
!include "WordFunc.nsh"
!include "WinMessages.nsh"
!include "FileFunc.nsh"
!include "UAC.nsh"

; set the default installation directory
!if "${PACKAGE_ARCH}" == "x64"
  !define PROGRAMFILES $PROGRAMFILES64
  !define HKLM HKLM64
  !define HKCU HKCU64
!else
  !define PROGRAMFILES $PROGRAMFILES
  !define HKLM HKLM
  !define HKCU HKCU
!endif

; the version information
!define VERSION      "${PACKAGE_VERSION}"
!if "${PACKAGE_VERSION_BUILD}" != ""
!define VERSION_FULL "${PACKAGE_VERSION}+${PACKAGE_VERSION_BUILD}"
!else
!define VERSION_FULL "${PACKAGE_VERSION}"
!endif

; set the package name
Name "${PACKAGE_NAME} - v${VERSION}"

; set the output file path
OutFile "${PACKAGE_OUTPUTFILE}"

InstallDir $PROGRAMFILES64\${PACKAGE_INSTALL_DIR}

; set the working directory
!cd "${PACKAGE_WORKDIR}"

; use unicode
Unicode true

; use best compressor
SetCompressor /FINAL /SOLID lzma
SetCompressorDictSize 64
SetDatablockOptimize ON

; request application privileges for Windows Vista
RequestExecutionLevel user

; set DPI aware
ManifestDPIAware true

; set icon
!if "${PACKAGE_ICONFILE}" != ""
  !define MUI_ICON "${PACKAGE_ICONFILE}"
!endif

; UAC
!macro Init thing
  uac_tryagain:
  !insertmacro UAC_RunElevated
  ${Switch} $0
  ${Case} 0
    ${IfThen} $1 = 1 ${|} Quit ${|} ;we are the outer process, the inner process has done its work, we are done
    ${IfThen} $3 <> 0 ${|} ${Break} ${|} ;we are admin, let the show go on
    ${If} $1 = 3 ;RunAs completed successfully, but with a non-admin user
      MessageBox mb_YesNo|mb_IconExclamation|mb_TopMost|mb_SetForeground "This ${thing} requires admin privileges, try again" /SD IDNO IDYES uac_tryagain IDNO 0
    ${EndIf}
    ;fall-through and die
  ${Case} 1223
    MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "This ${thing} requires administrator privileges.$\r$\nPlease run the installer as administrator or contact your system administrator."
    Quit
  ${Case} 1062
    MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Logon service is not running.$\r$\nPlease restart your computer and try again."
    Quit
  ${Default}
    MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Unable to elevate privileges (error code: $0).$\r$\nPlease try running the installer as administrator."
    Quit
  ${EndSwitch}

  ; The UAC plugin changes the error level even in the inner process, reset it.
  ; note fix install exit code 1223 to 0 with slient /S
  SetErrorLevel 0
  SetShellVarContext all
!macroend

; add the install Pages
!insertmacro MUI_PAGE_WELCOME
!if "${PACKAGE_LICENSEFILE}" != ""
  !insertmacro MUI_PAGE_LICENSE "${PACKAGE_LICENSEFILE}"
!endif
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

; add uninstall Pages
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_UNPAGE_FINISH

; add languages
!insertmacro MUI_LANGUAGE "English"

; set registry paths
!define RegUninstall "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PACKAGE_NAME}"

; set product information
VIProductVersion                         "${VERSION}"
VIFileVersion                            "${VERSION}"
VIAddVersionKey /LANG=0 ProductName      "${PACKAGE_NAME}"
VIAddVersionKey /LANG=0 Comments         "${PACKAGE_DESCRIPTION}"
VIAddVersionKey /LANG=0 CompanyName      "${PACKAGE_COMPANY}"
VIAddVersionKey /LANG=0 LegalCopyright   "${PACKAGE_COPYRIGHT}"
VIAddVersionKey /LANG=0 FileDescription  "${PACKAGE_NAME} Installer - v${VERSION}"
VIAddVersionKey /LANG=0 OriginalFilename "${PACKAGE_FILENAME}"
VIAddVersionKey /LANG=0 FileVersion      "${VERSION_FULL}"
VIAddVersionKey /LANG=0 ProductVersion   "${VERSION_FULL}"

; helper functions
Function TrimQuote
  Exch $R1 ; Original string
  Push $R2

Loop:
  StrCpy $R2 "$R1" 1
  StrCmp "$R2" "'"   TrimLeft
  StrCmp "$R2" "$\"" TrimLeft
  StrCmp "$R2" "$\r" TrimLeft
  StrCmp "$R2" "$\n" TrimLeft
  StrCmp "$R2" "$\t" TrimLeft
  StrCmp "$R2" " "   TrimLeft
  GoTo Loop2
TrimLeft:
  StrCpy $R1 "$R1" "" 1
  Goto Loop

Loop2:
  StrCpy $R2 "$R1" 1 -1
  StrCmp "$R2" "'"   TrimRight
  StrCmp "$R2" "$\"" TrimRight
  StrCmp "$R2" "$\r" TrimRight
  StrCmp "$R2" "$\n" TrimRight
  StrCmp "$R2" "$\t" TrimRight
  StrCmp "$R2" " "   TrimRight
  GoTo Done
TrimRight:
  StrCpy $R1 "$R1" -1
  Goto Loop2

Done:
  Pop $R2
  Exch $R1
FunctionEnd

; remove directory if it exists
Function RMDirIfExists
!define RMDirIfExists '!insertmacro RMDirIfExistsCall'
!macro RMDirIfExistsCall _PATH
  push '${_PATH}'
 Call RMDirIfExists
!macroend
  Exch $0
  IfFileExists "$0" 0 fileDoesNotExist
  RMDir /r "$0"
  fileDoesNotExist:
FunctionEnd

Function un.RMDirIfExists
!define unRMDirIfExists '!insertmacro unRMDirIfExistsCall'
!macro unRMDirIfExistsCall _PATH
  push '${_PATH}'
  Call un.RMDirIfExists
!macroend
  Exch $0
  IfFileExists "$0" 0 fileDoesNotExist
  RMDir /r "$0"
  fileDoesNotExist:
FunctionEnd

; remove file if it exists
Function RMFileIfExists
!define RMFileIfExists '!insertmacro RMFileIfExistsCall'
!macro RMFileIfExistsCall _PATH
  push '${_PATH}'
  Call RMFileIfExists
!macroend
  Exch $0
  IfFileExists "$0" 0 fileDoesNotExist
  Delete "$0"
  fileDoesNotExist:
FunctionEnd

Function un.RMFileIfExists
!define unRMFileIfExists '!insertmacro unRMFileIfExistsCall'
!macro unRMFileIfExistsCall _PATH
  push '${_PATH}'
  Call un.RMFileIfExists
!macroend
  Exch $0
  IfFileExists "$0" 0 fileDoesNotExist
  Delete "$0"
  fileDoesNotExist:
FunctionEnd

; remove it's parent directories if they are empty
Function RMEmptyParentDirs
!define RMEmptyParentDirs '!insertmacro RMEmptyParentDirsCall'
!macro RMEmptyParentDirsCall _PATH
  push '${_PATH}'
  Call RMEmptyParentDirs
!macroend
  ClearErrors

  Exch $0
  RMDir "$0\.."

  IfErrors Skip
  ${RMEmptyParentDirs} "$0\.."
  Skip:

  Pop $0
FunctionEnd

Function un.RMEmptyParentDirs
!define unRMEmptyParentDirs '!insertmacro unRMEmptyParentDirsCall'
!macro unRMEmptyParentDirsCall _PATH
  push '${_PATH}'
  Call un.RMEmptyParentDirs
!macroend
  ClearErrors

  Exch $0
  RMDir "$0\.."

  IfErrors Skip
  ${unRMEmptyParentDirs} "$0\.."
  Skip:

  Pop $0
FunctionEnd


; Set installer variables
Var NoAdmin                    ; Whether to use admin privileges
Var OldVersionInstalled        ; Whether old version is detected
Var OldInstallLocation         ; Old version installation path

Function .onInit
  ; Check privilege settings in command line parameters
  ${GetOptions} $CMDLINE "/NOADMIN" $NoAdmin
  IfErrors 0 +3
    !insertmacro Init "installer"
    StrCpy $NoAdmin "false"
    Goto +2
  StrCpy $NoAdmin "true"

  ; Check for old version installation
  StrCpy $OldVersionInstalled "false"
  ${If} $NoAdmin == "false"
    ; Admin privileges: Read installation path from HKLM
    ReadRegStr $R0 ${HKLM} ${RegUninstall} "InstallLocation"
  ${Else}
    ; Regular user privileges: Read installation path from HKCU
    ReadRegStr $R0 ${HKCU} ${RegUninstall} "InstallLocation"
  ${EndIf}
  ${If} $R0 != ""
    ; Found old version installation path
    StrCpy $OldVersionInstalled "true"
    Push $R0
    Call TrimQuote
    Pop $R0
    StrCpy $OldInstallLocation $R0
  ${EndIf}

  ; Set installation root directory
  ${If} $InstDir == ""
    ${If} $OldVersionInstalled == "true"
      ; Old version detected: Install to old version location
      StrCpy $InstDir $OldInstallLocation
    ${Else}
      ; No old version: Install to default location
      StrCpy $InstDir "${PROGRAMFILES}\${PACKAGE_NAME}"
    ${EndIf}
  ${EndIf}
FunctionEnd


; Uninstall old version function
Function UninstallOldVersion
  ${If} $OldVersionInstalled == "true"
    ; Verify installation path security
    ${If} $OldInstallLocation == ""
      DetailPrint "Old installation location is empty, skipping uninstall"
      Goto SkipUninstall
    ${EndIf}
    
    ; Check if it's a system critical directory
    ${If} $OldInstallLocation == "$WINDIR"
    ${OrIf} $OldInstallLocation == "$SYSDIR"
    ${OrIf} $OldInstallLocation == "$PROGRAMFILES"
    ${OrIf} $OldInstallLocation == "$PROGRAMFILES64"
      DetailPrint "Old installation location is a system directory, skipping uninstall"
      Goto SkipUninstall
    ${EndIf}
    
    ; Check if installation directory actually exists
    IfFileExists "$OldInstallLocation" 0 +3
      ; Check if uninstaller exists
      IfFileExists "$OldInstallLocation\uninstall.exe" 0 +3
        ; Verify uninstaller path security
        ${If} "$OldInstallLocation\uninstall.exe" == ""
          DetailPrint "Uninstaller path is empty, skipping uninstall"
          Goto SkipUninstall
        ${EndIf}
        
        ; Execute silent uninstall
        ExecWait '"$OldInstallLocation\uninstall.exe" /S' $0
        ${If} $0 != 0
          MessageBox mb_YesNo|mb_IconExclamation|mb_TopMost|mb_SetForeground "Failed to uninstall old version (error code: $0).$\r$\n$\r$\nDo you want to continue with the installation anyway?$\r$\nNote: You may need to manually uninstall the old version later."
          ${If} $0 == IDYES
            DetailPrint "User chose to continue despite uninstall failure"
            Call CleanupOldVersionRegistry
          ${Else}
            Abort "Installation cancelled by user"
          ${EndIf}
        ${EndIf}
        Goto SkipUninstall
      ; Installation directory exists but uninstaller is missing - clean up registry only
      DetailPrint "Old version installation found but uninstaller missing. Cleaning up registry only..."
      Call CleanupOldVersionRegistry
      Goto SkipUninstall
    ; Installation directory doesn't exist - only clean up registry
    DetailPrint "Old version installation directory not found. Cleaning up registry only..."
    Call CleanupOldVersionRegistry
    
    SkipUninstall:
    StrCpy $OldVersionInstalled "false"
  ${EndIf}
FunctionEnd

; Clean up old version registry entries function
Function CleanupOldVersionRegistry
  DetailPrint "Cleaning up old version registry entries..."
  
  ; Clean up registry keys
  ${If} $NoAdmin == "false"
    DeleteRegKey ${HKLM} ${RegUninstall}
  ${Else}
    DeleteRegKey ${HKCU} ${RegUninstall}
  ${EndIf}
  
  ; Clean up file associations
  DeleteRegKey HKCR "Applications\MGResearch.exe"
  DeleteRegKey HKCR "Applications\${PACKAGE_NAME}.exe"
FunctionEnd

Section "${PACKAGE_NAME} (required)" InstallExecutable

  SectionIn RO

  ; Uninstall old version before installing new version
  Call UninstallOldVersion

  ; set output path to the installation directory.
  SetOutPath $InstDir

  ; add install commands
  ${PACKAGE_INSTALLCMDS}

  ; add uninstaller
  WriteUninstaller "uninstall.exe"
  ; Write the uninstall keys for Windows
  !macro AddReg RootKey
    WriteRegStr   ${RootKey} ${RegUninstall} "NoAdmin"               "$NoAdmin"
    WriteRegStr   ${RootKey} ${RegUninstall} "DisplayName"           "${PACKAGE_TITLE}"
    !if "${PACKAGE_NSIS_DISPLAY_ICON}" != ""
    WriteRegStr   ${RootKey} ${RegUninstall} "DisplayIcon"           '"${PACKAGE_NSIS_DISPLAY_ICON}"'
    !endif
    WriteRegStr   ${RootKey} ${RegUninstall} "Comments"              "${PACKAGE_DESCRIPTION}"
    WriteRegStr   ${RootKey} ${RegUninstall} "Publisher"             "${PACKAGE_COPYRIGHT}"
    WriteRegStr   ${RootKey} ${RegUninstall} "UninstallString"       '"$InstDir\uninstall.exe"'
    WriteRegStr   ${RootKey} ${RegUninstall} "QuiteUninstallString"  '"$InstDir\uninstall.exe" /S'
    WriteRegStr   ${RootKey} ${RegUninstall} "InstallLocation"       $InstDir
    WriteRegStr   ${RootKey} ${RegUninstall} "HelpLink"              "${PACKAGE_HOMEPAGE}"
    WriteRegStr   ${RootKey} ${RegUninstall} "URLInfoAbout"          "${PACKAGE_HOMEPAGE}"
    WriteRegStr   ${RootKey} ${RegUninstall} "URLUpdateInfo"         "${PACKAGE_HOMEPAGE}"
    WriteRegDWORD ${RootKey} ${RegUninstall} "VersionMajor"          ${PACKAGE_VERSION_MAJOR}
    WriteRegDWORD ${RootKey} ${RegUninstall} "VersionMinor"          ${PACKAGE_VERSION_MINOR}
    WriteRegStr   ${RootKey} ${RegUninstall} "DisplayVersion"        ${VERSION_FULL}
    WriteRegDWORD ${RootKey} ${RegUninstall} "NoModify"              1
    WriteRegDWORD ${RootKey} ${RegUninstall} "NoRepair"              1

    ; write size to reg
    ${GetSize} "$InstDir" "/S=0K" $0 $1 $2
    IntFmt $0 "0x%08X" $0
    WriteRegDWORD ${RootKey} ${RegUninstall} "EstimatedSize" "$0"
  !macroend

  ${If} $NoAdmin == "false"
    !insertmacro AddReg ${HKLM}
  ${Else}
    !insertmacro AddReg ${HKCU}
  ${EndIf}
SectionEnd

${PACKAGE_NSIS_INSTALL_SECTIONS}

; define language strings
LangString DESC_InstallExecutable ${LANG_ENGLISH} "${PACKAGE_DESCRIPTION}"
${PACKAGE_NSIS_INSTALL_DESCS}

; assign language strings to sections
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
!insertmacro MUI_DESCRIPTION_TEXT ${InstallExecutable} $(DESC_InstallExecutable)
${PACKAGE_NSIS_INSTALL_DESCRIPTION_TEXTS}
!insertmacro MUI_FUNCTION_DESCRIPTION_END

; setup uninstaller
Function un.onInit
  ; check if we need uac
  ReadRegStr $NoAdmin ${HKLM} ${RegUninstall} "NoAdmin"
  IfErrors 0 +2
  ReadRegStr $NoAdmin ${HKCU} ${RegUninstall} "NoAdmin"

  ${IfNot} $NoAdmin == "true"
    !insertmacro Init "uninstaller"
  ${EndIf}
FunctionEnd

Section "Uninstall"
  ; delete shortcuts
  Delete "$SMPROGRAMS\${PACKAGE_SHORTCUT_NAME}.lnk"
  Delete "$DESKTOP\${PACKAGE_SHORTCUT_NAME}.lnk"

  ; delete register key for Mogan Research v1.2.1
  DeleteRegKey HKCR "Applications\MGResearch.exe"
  ; delete register key for Mogan Research
  DeleteRegKey HKCR "Applications\${PACKAGE_NAME}.exe"

  ; add uninstall commands
  ${PACKAGE_UNINSTALLCMDS}

  ; Clean up registry keys
  ${If} $NoAdmin == "false"
    DeleteRegKey ${HKLM} ${RegUninstall}
  ${Else}
    DeleteRegKey ${HKCU} ${RegUninstall}
  ${EndIf}

  ; remove uninstall.exe
  ${unRMFileIfExists} "$InstDir\uninstall.exe"
  ${unRMEmptyParentDirs} "$InstDir\uninstall.exe"

SectionEnd

Section "Create shortcuts" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite on

  CreateShortCut "$SMPROGRAMS\${PACKAGE_SHORTCUT_NAME}.lnk" "$INSTDIR\bin\${PACKAGE_NAME}.exe"
  CreateShortCut "$DESKTOP\${PACKAGE_SHORTCUT_NAME}.lnk" "$INSTDIR\bin\${PACKAGE_NAME}.exe"
SectionEnd

Section "File Associations" SEC02
  WriteRegExpandStr HKCR "Applications\${PACKAGE_NAME}.exe\shell\open\command" "" '"$INSTDIR\bin\${PACKAGE_NAME}.exe" "%1"'
SectionEnd

Section "Check and Install Visual C++ Redistributables" SEC03
    ExecWait '"$INSTDIR\bin\vc_redist.x64.exe" /install /passive /norestart'
SectionEnd

Function .onInstSuccess  
    ExecShell "" "$INSTDIR\bin\${PACKAGE_NAME}.exe"  
FunctionEnd
